const std = @import("std");

pub const OpArgMode = enum { OP_ARG_N, OP_ARG_U, OP_ARG_R, OP_ARG_K };
pub const OpMode = enum { IABC, IA_BX, IA_SBX, I_AX };

pub const OpCodeInfo = struct {
    desc: []const u8,
    mode: OpMode,
    set_a_flag: bool,
    arg_b_mode: OpArgMode,
    arg_c_mode: OpArgMode,
    test_flag: bool,
};

pub const OpCode = enum {
    OP_MOVE,
    OP_LOADK,
    OP_LOADKX,
    OP_LOADBOOL,
    OP_LOADNIL,
    OP_GETUPVAL,
    OP_GETTABUP,
    OP_GETTABLE,
    OP_SETTABUP,
    OP_SETUPVAL,
    OP_SETTABLE,
    OP_NEWTABLE,
    OP_SELF,
    OP_ADD,
    OP_SUB,
    OP_MUL,
    OP_MOD,
    OP_POW,
    OP_DIV,
    OP_IDIV,
    OP_BAND,
    OP_BOR,
    OP_BXOR,
    OP_SHL,
    OP_SHR,
    OP_UNM,
    OP_BNOT,
    OP_NOT,
    OP_LEN,
    OP_CONCAT,
    OP_JMP,
    OP_EQ,
    OP_LT,
    OP_LE,
    OP_TEST,
    OP_TESTSET,
    OP_CALL,
    OP_TAILCALL,
    OP_RETURN,
    OP_FORLOOP,
    OP_FORPREP,
    OP_TFORCALL,
    OP_TFORLOOP,
    OP_SETLIST,
    OP_CLOSURE,
    OP_VARARG,
    OP_EXTRAARG,

    pub fn info(self: OpCode) OpCodeInfo {
        return switch (self) {
            .OP_MOVE => .{ .desc = "MOVE", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_R, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_LOADK => .{ .desc = "LOADK", .mode = .IA_BX, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_LOADKX => .{ .desc = "LOADKX", .mode = .IA_BX, .set_a_flag = true, .arg_b_mode = .OP_ARG_N, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_LOADBOOL => .{ .desc = "LOADBOOL", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_U, .arg_c_mode = .OP_ARG_U, .test_flag = false },
            .OP_LOADNIL => .{ .desc = "LOADNIL", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_U, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_GETUPVAL => .{ .desc = "GETUPVAL", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_U, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_GETTABUP => .{ .desc = "GETTABUP", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_U, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_GETTABLE => .{ .desc = "GETTABLE", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_R, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_SETTABUP => .{ .desc = "SETTABUP", .mode = .IABC, .set_a_flag = false, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_SETUPVAL => .{ .desc = "SETUPVAL", .mode = .IABC, .set_a_flag = false, .arg_b_mode = .OP_ARG_U, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_SETTABLE => .{ .desc = "SETTABLE", .mode = .IABC, .set_a_flag = false, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_NEWTABLE => .{ .desc = "NEWTABLE", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_U, .arg_c_mode = .OP_ARG_U, .test_flag = false },
            .OP_SELF => .{ .desc = "SELF", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_U, .arg_c_mode = .OP_ARG_U, .test_flag = false },
            .OP_ADD => .{ .desc = "ADD", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_SUB => .{ .desc = "SUB", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_MUL => .{ .desc = "MUL", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_MOD => .{ .desc = "MOD", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_POW => .{ .desc = "POW", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_DIV => .{ .desc = "DIV", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_IDIV => .{ .desc = "IDIV", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_BAND => .{ .desc = "BAND", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_BOR => .{ .desc = "BOR", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_BXOR => .{ .desc = "BXOR", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_SHL => .{ .desc = "SHL", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_SHR => .{ .desc = "SHR", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = false },
            .OP_UNM => .{ .desc = "UNM", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_R, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_BNOT => .{ .desc = "BNOT", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_R, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_NOT => .{ .desc = "NOT", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_R, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_LEN => .{ .desc = "LEN", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_R, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_CONCAT => .{ .desc = "CONCAT", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_R, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_JMP => .{ .desc = "JMP", .mode = .IA_SBX, .set_a_flag = false, .arg_b_mode = .OP_ARG_R, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_EQ => .{ .desc = "EQ", .mode = .IABC, .set_a_flag = false, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = true },
            .OP_LT => .{ .desc = "LT", .mode = .IABC, .set_a_flag = false, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = true },
            .OP_LE => .{ .desc = "LE", .mode = .IABC, .set_a_flag = false, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_K, .test_flag = true },
            .OP_TEST => .{ .desc = "TEST", .mode = .IABC, .set_a_flag = false, .arg_b_mode = .OP_ARG_N, .arg_c_mode = .OP_ARG_U, .test_flag = true },
            .OP_TESTSET => .{ .desc = "TESTSET", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_R, .arg_c_mode = .OP_ARG_U, .test_flag = true },
            .OP_CALL => .{ .desc = "CALL", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_U, .arg_c_mode = .OP_ARG_U, .test_flag = false },
            .OP_TAILCALL => .{ .desc = "TAILCALL", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_U, .arg_c_mode = .OP_ARG_U, .test_flag = false },
            .OP_RETURN => .{ .desc = "RETURN", .mode = .IABC, .set_a_flag = false, .arg_b_mode = .OP_ARG_U, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_FORLOOP => .{ .desc = "FORLOOP", .mode = .IA_SBX, .set_a_flag = true, .arg_b_mode = .OP_ARG_R, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_FORPREP => .{ .desc = "FORPREP", .mode = .IA_SBX, .set_a_flag = false, .arg_b_mode = .OP_ARG_R, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_TFORCALL => .{ .desc = "TFORCALL", .mode = .IABC, .set_a_flag = false, .arg_b_mode = .OP_ARG_N, .arg_c_mode = .OP_ARG_U, .test_flag = false },
            .OP_TFORLOOP => .{ .desc = "TFORLOOP", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_SETLIST => .{ .desc = "SETLIST", .mode = .IABC, .set_a_flag = false, .arg_b_mode = .OP_ARG_U, .arg_c_mode = .OP_ARG_U, .test_flag = false },
            .OP_CLOSURE => .{ .desc = "CLOSURE", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_U, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_VARARG => .{ .desc = "VARARG", .mode = .IABC, .set_a_flag = true, .arg_b_mode = .OP_ARG_U, .arg_c_mode = .OP_ARG_N, .test_flag = false },
            .OP_EXTRAARG => .{ .desc = "EXTRAARG", .mode = .I_AX, .set_a_flag = false, .arg_b_mode = .OP_ARG_K, .arg_c_mode = .OP_ARG_N, .test_flag = false },
        };
    }
};
